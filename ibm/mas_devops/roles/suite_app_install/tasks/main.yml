---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if required properties are not provided"
  assert:
    that:
      - mas_instance_id is defined and mas_instance_id != ""
      - mas_app_id is defined and mas_app_id != ""
    fail_msg: "One or more required properties are not set"


# 2. Load var files
# -----------------------------------------------------------------------------
- name: Load variables
  include_vars: "vars/{{ mas_app_id }}.yml"

# 2.1  Run Application Specific Tasks
- name: Run application specific tasks
  when:
    - mas_app_id is in ['iot', 'visualinspection']  # applications which have something to process before installing the operator
  include_tasks: "tasks/{{ mas_app_id }}.yml"

# 2.2 Load default application spec, if none is provided by user
- name: Load default application spec
  when: mas_app_spec is not defined or mas_app_spec == ""
  include_vars: "vars/defaultspecs/{{ mas_app_id }}.yml"

# 3. Provide debug information
# -----------------------------------------------------------------------------
- name: "Configure namespace"
  set_fact:
    mas_app_namespace: "mas-{{ mas_instance_id }}-{{ mas_app_id }}"

- name: "Debug information"
  debug:
    msg:
      - "Instance ID ................ {{ mas_instance_id }}"
      - "Application ID ............. {{ mas_app_id }}"
      - "MAS app namespace .......... {{ mas_app_namespace }}"
      - "App catalog source ......... {{ mas_app_catalog_source }}"
      - "App channel ................ {{ mas_app_channel }}"
      - "App Subscription Upgrade ... {{ mas_app_upgrade_strategy }}"


# 4. Apply initial security context constraints
# -----------------------------------------------------------------------------
- name: "Apply initial security context constraints"
  when: mas_app_id == "visualinspection"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/customsccinit.yml.j2') }}"

- name: "Add anyuid permissions to visualinspection service account"
  when: mas_app_id == "visualinspection"
  shell: |
    oc adm policy add-scc-to-user anyuid system:serviceaccount:{{ mas_app_namespace }}:ibm-mas-visualinspection-operator


# 5. Install the operator
# -----------------------------------------------------------------------------
- name: "Install Operator"
  include_role:
    name: ibm.mas_devops.install_operator
  vars:
    namespace: "{{ mas_app_namespace }}"
    icr_username: "{{ mas_entitlement_username }}"
    icr_password: "{{ mas_entitlement_key }}"
    catalog_source: "{{ mas_app_catalog_source }}"
    operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
    subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"

- name: Lookup and Approve MAS Subscription
  block:
    - name: Lookup and Approve Operator install plan
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: InstallPlan
        namespace: "{{ mas_app_namespace }}"
        label_selectors:
          - operators.coreos.com/ibm-mas-{{mas_app_id}}.{{mas_app_namespace}}
      register: mas_app_installplan_info
      retries: 20
      delay: 60 # Retry for approx 20 minutes (60s * 20 attempts) before giving up
      until: mas_app_installplan_info.resources | length > 0

    - name: Approve the install plan for MAS Application
      when:
        - mas_app_installplan_info.resources[0].status.phase != "Complete"
      kubernetes.core.k8s:
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: InstallPlan
          metadata:
            name: "{{ mas_app_installplan_info.resources[0].metadata.name }}"
            namespace: "{{ mas_app_namespace }}"
          spec:
            approved: true
  when: mas_app_upgrade_strategy == 'Manual'


# 6. Wait until the Application's CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the Application's CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "{{ mas_app_fqn }}"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: app_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - app_crd_info.resources is defined
    - app_crd_info.resources | length > 0


# 7. Integrated Airgap support
# -----------------------------------------------------------------------------
# Before we create the CR we will set up the Airgap Image Map
# We need to install the digest imagemap for ibm-sls and ibm-truststore-mgr
- name: "Determine whether this is an airgap environment"
  include_tasks: "{{ role_path }}/../../common_tasks/detect_airgap.yml"

- name: "Enable use of image digests"
  when: airgap_install
  include_tasks: "tasks/install_digest_cm.yml"


# 8. App installation
# -----------------------------------------------------------------------------
- name: Install application
  kubernetes.core.k8s:
    state: present
    namespace: "{{ mas_app_namespace }}"
    definition: "{{ lookup('template', 'templates/application.yml.j2') }}"


# 9. Wait for application to be ready
# -----------------------------------------------------------------------------
- name: "Wait for application to be ready ({{ mas_app_install_delay }}s delay)"
  kubernetes.core.k8s_info:
    api_version: "{{ mas_app_api_version }}"
    name: "{{ mas_instance_id }}"
    namespace: "{{ mas_app_namespace }}"
    kind: "{{ mas_app_kind }}"
    wait: yes # changed true to yes
    wait_condition:
      status: "True"
      type: Ready
    wait_sleep: 30
    wait_timeout: 120 # before we give up and fall back into the retry loop
  register: app_cr_result
  retries: "{{ mas_app_install_retries }}"
  delay: "{{ mas_app_install_delay }}"
  until:
    - app_cr_result.resources is defined
    - app_cr_result.resources | length > 0
    - app_cr_result.resources | json_query('[*].status.conditions[?type==`Ready`][].status') | select ('match','True') | list | length == 1


# 10. Create Data Dictionary Image Digest Map for Monitor (special case work around)
# ---------------------------------------------------------------------------------
- name: "Create ibm-data-dictionary Image Digest Map"
  when: mas_app_id == "monitor" and airgap_install
  include_tasks: "tasks/{{ mas_app_id }}.yml"

# 11. Apply final security context constraints
# -----------------------------------------------------------------------------
- name: "Apply final security context constraints"
  when: mas_app_id == "visualinspection"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/customscc.yml.j2') }}"

- name: "Remove anyuid permissions from visualinspection service account"
  when: mas_app_id == "visualinspection"
  shell: |
    oc adm policy remove-scc-from-user anyuid system:serviceaccount:{{ mas_app_namespace }}:ibm-mas-visualinspection-operator
