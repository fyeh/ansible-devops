---

# 0. Check for required software
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Test if skopeo is installed"
  shell: skopeo --version
  register: skopeo_version_result
  ignore_errors: true

- name: "{{ case_name }} : Fail if skopeo is not installed"
  assert:
    that: ( skopeo_version_result['rc'] == 0 )
    fail_msg: "skopeo tool must be installed."

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Fail if required properties are not provided for dev access"
  assert:
    that:
      - artifactory_username is defined and artifactory_username != ""
      - artifactory_token is defined and artifactory_token != ""
    fail_msg: "One or more required properties are missing"

# 2. Debug
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Airgap setup configuration"
  debug:
    msg:
      - "Case Name .............................. {{ case_name }}"
      - "Case Version ........................... {{ case_version }}"
      - "Registry Public Host ................... {{ registry_public_host }}"
      - "Registry Public Port ................... {{ registry_public_port }}"

# 3. Download the dev with digest bundle from artifactory
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Download the dev with digest bundle"
  ansible.builtin.get_url:
    url: "{{ artifactory_bundle_url }}/{{ case_name }}/{{ case_version }}/{{ case_name }}-dev-with-digest-bundle-{{ case_version }}.tgz"
    username: "{{ artifactory_username }}"
    password: "{{ artifactory_token }}"
    dest: "{{ mirror_working_dir }}"
  register: bundle_download

# 4. Extract the dev with digest bundle
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Extract the dev with digest bundle"
  shell: |
    tar -xzf "{{ bundle_download.dest }}" -C "{{ mirror_working_dir }}"
  register: bundle_unarchive

# 5. Prepare directories to store the manifest file
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Create target directories (direct)"
  file:
    path: "{{ mirror_working_dir }}/manifests/direct"
    state: directory

- name: "{{ case_name }} : Remove manifest file if it already exists"
  ansible.builtin.file:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    state: absent

# 6. Write src=dest mapping for image mirroring
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Generate manifest using the related images from the CSV file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    create: true
    line: "{{ item.image + '=' + registry_public_url + '/' + item.name }}"
  loop: "{{ (lookup('file', '{{ mirror_working_dir }}/{{ case_name }}-dev-with-digest-bundle/operators/{{ case_name }}/config/manifests/bases/{{ case_name }}.clusterserviceversion.yaml') | from_yaml).spec.relatedImages }}"

# 7. Add operator bundle with digest to the list
# -----------------------------------------------------------------------------
- name: "{{ case_name }} : Get digest of operator bundle with digest"
  shell: |
    (skopeo inspect "docker://{{ artifactory_image_repo }}/{{ operator_bundle }}" \
      --creds "{{ artifactory_username }}:{{ artifactory_token }}" \
      --no-tags)| jq -r '[.Name, .Digest] | join("@")' \
  register: operator_bundle_with_digest
  vars:
    operator_bundle: "cpopen/{{ case_name }}-operator-bundle-with-digest:{{ case_version }}"

- debug:
  msg: "Bundle image with digest ................ {{ operator_bundle_with_digest.stdout }}"

- name: "{{ case_name }} : Add operator bundle to manifest file"
  ansible.builtin.lineinfile:
    path: "{{ mirror_working_dir }}/manifests/direct/{{ case_name }}_{{ case_version }}.txt"
    line: '{{ operator_bundle_with_digest.stdout + "=" +registry_public_url + "/cpopen/" + case_name + "-operator-bundle-with-digest" }}'
